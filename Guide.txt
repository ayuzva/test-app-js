Open in app
Get started
CloudBoost
Creating your first MERN stack application.
Umair Aslam's Tech Blog
Umair Aslam's Tech Blog
Follow
Nov 19, 2017 · 23 min read

In this tutorial, I will teach you how to create a simple MERN stack application. MERN Stack is a combination of four technologies — MongoDB(M), Express(E), React(R), NodeJS(N).
Pre-requisites
You need to have a basic understanding of all the four technologies that make up the MERN stack. You should also have npm (Node Package Manager) installed. This is NOT a tutorial on MongoDB, Express, React or NodeJS.
End Goal
We will create an Expense Manager application using MERN stack. The application will enable the user to add, update, delete and display their expenses. Let’s get to it.
Step 1: Create a basic React Application.
In this step we will create a basic react application to get us started. To do that we will use the create-react-app package. First install the create-react-app package by running the following command.
npm i -g create-react-app
We will now use create-react-app package to create a new react application.
create-react-app expense-manager
This will create a new folder called expense-manager and install the react dependencies. Navigate into the new folder. It should look like this.

Structure of Root Folder
You can execute the ‘npm start’ command to run this application. It should look like this.

Basic React App
Step 2: Install the dependencies.
Run the following command to install the dependencies. Do not forget to put ‘ — SAVE’ at the end as it will update the package.json file.
npm i axios babel-cli body-parser express mongoose nodemon react-bootstrap react-modal react-router-dom --SAVE
axios will be used to send requests to server to fetch or insert data.
body-parser parses the request bodies. We can get access to the information inside the request via req.body.
babel-cli will be used to compile files from the command line.
express is a web application framework for NodeJS.
mongoose is an ODM framework for MongoDB.
nodemon automatically restarts the server whenever the code changes.
react-bootstrap lets us use bootstrap components with React.
react-modal lets us create a modal dialog in React.
react-router-dom lets us use React router.
Step 3: Re-arrange the React application.
Now we will re-arrange our React Application.
First of all, create a client folder inside the root folder. The client-side code will reside inside this folder. Create a components folder and a css folder inside the client folder.
Now move the index.html file from public folder to client folder and change the extension of index.html from html to ejs. ‘ejs’ is a template engine that lets you generate html markup with plain JavaScript. We will talk more about it when we will configure the server.
You can now remove the public folder. Remove the references of manifest.json and favicon.ico from index.ejs.
<!-- client/index.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Expense Manager</title>
  </head>
  <body>
    <h1>Expense Manager</h1>
    <div id="root"></div>
</body>
</html>
Let’s now move the App.js file from src to client/components, App.css to client/css and index.js to client.
Remove the logo.svg references and fixed the path of App.css in App.js.
//client/components/App.js
import React, { Component } from 'react';
import '../css/App.css';
class App extends Component {
  render() {
    return (
      <div className="App">
        <header className="App-header">
          <h1 className="App-title">Welcome to React</h1>
        </header>
        <p className="App-intro">
          To get started, edit <code>src/App.js</code> and save to reload.
        </p>
      </div>
    );
  }
}
export default App;
Remove the registerServiceWorker references from index.js.
//client/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './components/App';
ReactDOM.render(<App />, document.getElementById('root'));
You can now remove the src folder. Your root folder should now look like this.

Structure of Root Folder
Step 4: Server-side configurations.
We will now create the server and configure it. Create a new folder inside your root directory and call it server. This ensures absolute segregation between client-side and server-side code.
Inside the server folder, create a server.js file. Copy and paste the following code inside the server.js.
//server/server.js
var express = require('express');
var router = require('./routes/routes.js')
var path = require('path');
var app = express();
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, '../client'));
app.use(express.static(path.join(__dirname, '../client')));
app.use('/', router);
module.exports=app;
Here, we create a server, set the ‘view engine’ to ‘ejs’ as we discussed earlier. We also tell our server where our template file(s) are placed. All our front-end code will reside inside the client folder as already discussed.
Notice in the above code that we are referring to a file called routes.js inside the routes directory to get the routes. Now let’s create this directory and file.
Inside the server folder, create a routes folder. Inside the routes directory, create a routes.js file. Put the following code inside the routes.js file.
//server/routes/routes.js
var express = require('express');
var router = express.Router();
router.get('/', function(req, res){
  res.render('index')
});
module.exports = router;
Step 5: Bundle the front and back-end.
To run our MERN application, we need to bundle together the Reach front-end and Node back-end. We will use Webpack for this purpose. You read more about it here.
Firstly, we will create a configuration file for server. Create a folder called bin in your root directory and create a new file www inside it. Place the following code inside the www file.
var app = require('../server/server');
var port = 8000
app.listen(port, function() {
 console.log('running at localhost: ' + port);
});
Next step is to configure Webpack. Add a webpack.config.js file in your root folder. Place the following code inside it.
//webpack.config.js
var path = require('path');
var webpack = require('webpack');
module.exports = {
 entry: './client/index.js',
 output: {
  path: path.join(__dirname, 'client'),
  filename: 'bundle.js'
 },
 module: {
  loaders: [{
   test: /.jsx?$/,
   loader: 'babel-loader',
   exclude: /node_modules/,
   query: {
    presets: ['es2015', 'react']
   }
  },
  {
   test: /\.css$/,
   loader: "style-loader!css-loader"
  }]
 }
}
Here we specify the entry point of our application which is index.js file.
The structure of your root folder should now look like this.

Structure of Root Folder
Webpack will bundle the JavaScript files together and generate a bundle.js file inside the client folder. Now include the bundle.js file in your index.ejs file by adding the following line before the closing html tag. We will also add the link to the bootstrap css file which will be used later. The index.ejs file now looks like this.
<!-- client/index.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="./css/App.css"></link>
    <title>Expense Manager</title>
  </head>
  <body>
    <h1>Expense Manager</h1>
    <div id="root"></div>
</body>
  <script src="bundle.js"></script>
</html>
Lastly, we need to open the package.json file and head to the scripts section. The following code ensures that executing the npm start command will start the React front-end and NodeJS server together.
"scripts": {
    "webpack": "webpack",
    "start": "npm run webpack && nodemon --exec babel-node -- bin/www"
  }
Now execute the npm start command and open http://localhost:8000 on your browser. You have successfully rendered your first ERN stack application. Of course there is no ‘M’ yet because we have not integrated the MongoDB yet. Now let’s sort out the M in MERN.
Step 6: Integrating the database with back-end.
To create a Mongo database I used MLAB which is a database-as-a-service provider for MongoDB. Sign up for a free account here and create a collection called expenses.
Find your MongoDB URI. It will look something like this:
mongodb://<dbuser>:<dbpassword>@ds001.mlab.com:001/db101
Replace <dbuser> and <dbpassword> with your username and password.
Now we will use Mongoose to model our MongoDB data. Create a new folder called models in your root folder and create Expense.js inside it.
//models/Expense.js
var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var expenseSchema = new Schema({
  description: String,
  amount: Number,
  month: String,
  year: Number
});
module.exports = mongoose.model('Expense', expenseSchema);
Next step is wiring the MongoDB with our server using the MongoDB URI on MLAB. The server.js will look like this.
//server/server.js
var express = require('express');
var router = require('./routes/routes.js')
var path = require('path');
var bodyParser = require('body-parser');
var app = express();
var mongoose = require('mongoose');
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, '../client'));
app.use(express.static(path.join(__dirname, '../client')));
app.use(bodyParser.json({limit: '50mb'}));
app.use(bodyParser.urlencoded({limit: '50mb', extended: false}));
mongoose.connect('mongodb://<dbuser>:<dbpassword>@ds001.mlab.com:001/db101');
app.use('/', router);
module.exports=app;
Next we will integrate the routes for CRUD operations at the back-end. Open the routes.js file inside the server/routes directory.
Import the Expense Mongoose model and body-parser package into routes.js.
var bodyParser = require('body-parser');
var Expense = require('./models/Expense');
We will add the /insert, /update, /delete, /getAll routes in routes.js.
//server/routes/routes.js
var express = require('express');
var router = express.Router();
var bodyParser = require('body-parser');
var Expense = require('../../models/Expense');
router.get('/', function(req, res){
  res.render('index')
});
router.route('/insert')
.post(function(req,res) {
 var expense = new Expense();
  expense.description = req.body.desc;
  expense.amount = req.body.amount;
  expense.month = req.body.month;
  expense.year = req.body.year;
expense.save(function(err) {
      if (err)
        res.send(err);
      res.send('Expense successfully added!');
  });
})
router.route('/update')
.post(function(req, res) {
 const doc = {
     description: req.body.description,
     amount: req.body.amount,
     month: req.body.month,
     year: req.body.year
 };
 console.log(doc);
  Expense.update({_id: req.body._id}, doc, function(err, result) {
      if (err)
        res.send(err);
      res.send('Expense successfully updated!');
  });
});
router.get('/delete', function(req, res){
 var id = req.query.id;
 Expense.find({_id: id}).remove().exec(function(err, expense) {
  if(err)
   res.send(err)
  res.send('Expense successfully deleted!');
 })
});
router.get('/getAll',function(req, res) {
 var monthRec = req.query.month;
 var yearRec = req.query.year;
 if(monthRec && monthRec != 'All'){
  Expense.find({$and: [ {month: monthRec}, {year: yearRec}]}, function(err, expenses) {
   if (err)
    res.send(err);
   res.json(expenses);
  });
 } else {
  Expense.find({year: yearRec}, function(err, expenses) {
   if (err)
    res.send(err);
   res.json(expenses);
  });
 }
});
module.exports = router;
Step 7: Wire the database back-end with React.
So we have a NodeJS server, a React front-end that is rendered by the server, a Mongoose model of our MongoDB data and a couple of server routes that interact with the MongoDB and perform the CRUD operations. The only piece missing from the jigsaw is a functionality that fetches or sends data from/to the server to/from React front-end. This is where Axios comes to our rescue. You can read more about Axios here.
Step 7.1. CRUD: Adding the Create functionality
We will create a new component for each of the CRUD operations. First, we will create an Add component. Head to the client/components directory and create an Add.js file.
Now we will use the Axios request to insert data in the MongoDB by using the /insert route we created at the server. We have done that in the insertNewExpense() function.
insertNewExpense(e) {
      axios.post('/insert',
        querystring.stringify({
          desc: e.state.description,
          amount: e.state.amount,
          month: e.state.month,
          year: e.state.year
        }), {
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        }).then(function(response) {
        e.setState({
          messageFromServer: response.data
        });
      });
    }
The Add component renders a button. A modal dialog pops up when that button is pressed. Inside the modal dialog, we have some input fields and a submit button. The input fields are used to fill in the details of the new expense. Pressing the submit button triggers the insertNewExpense() function which sends the information to the server via the /insert route using Axios request. The server stores the information in the MongoDB.
I used the react-modal package to create a modal dialog. The Add.js file now looks like this.
//client/components/Add.js
import React from 'react';
import {Button} from 'react-bootstrap';
import Modal from 'react-modal';
import axios from 'axios';
import {Link} from 'react-router-dom';
var querystring = require('querystring');
class Add extends React.Component {
constructor() {
      super();
this.state = {
        description: '',
        amount: '',
        month: '',
        year: '',
        messageFromServer: '',
        modalIsOpen: false
      }
this.handleSelectChange = this.handleSelectChange.bind(this);
      this.onClick = this.onClick.bind(this);
      this.handleTextChange = this.handleTextChange.bind(this);
      this.insertNewExpense = this.insertNewExpense.bind(this);
      this.openModal = this.openModal.bind(this);
      this.closeModal = this.closeModal.bind(this);
    }
openModal() {
      this.setState({
        modalIsOpen: true
      });
    }
closeModal() {
      this.setState({
        modalIsOpen: false,
        description: '',
        amount: '',
        month: 'Jan',
        year: 2016,
        messageFromServer: ''
      });
    }
componentDidMount() {
      this.setState({
        month: this.props.selectedMonth
      });
      this.setState({
        year: this.props.selectedYear
      });
    }
handleSelectChange(e) {
      if (e.target.name == 'month') {
        this.setState({
          month: e.target.value
        });
      }
      if (e.target.name == 'year') {
        this.setState({
          year: e.target.value
        });
      }
    }
onClick(e) {
      this.insertNewExpense(this);
    }
insertNewExpense(e) {
      axios.post('/insert',
        querystring.stringify({
          desc: e.state.description,
          amount: e.state.amount,
          month: e.state.month,
          year: e.state.year
        }), {
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        }).then(function(response) {
        e.setState({
          messageFromServer: response.data
        });
      });
    }
handleTextChange(e) {
      if (e.target.name == "description") {
        this.setState({
          description: e.target.value
        });
      }
if (e.target.name == "amount") {
        this.setState({
          amount: e.target.value
        });
      }
    }
render() {
   if(this.state.messageFromServer == ''){
      return (
        <div>
      <Button bsStyle="success" bsSize="small" onClick={this.openModal}><span className="glyphicon glyphicon-plus"></span></Button>
          <Modal
            isOpen={this.state.modalIsOpen}
            onRequestClose={this.closeModal}
            contentLabel="Add Expense"
       className="Modal">
<Link to={{pathname: '/', search: '' }} style={{ textDecoration: 'none' }}>
       <Button bsStyle="danger" bsSize="mini" onClick={this.closeModal}><span className="closebtn glyphicon glyphicon-remove"></span></Button>
      </Link><br/>
<fieldset>
       <label for="description">Description:</label><input type="text" id="description" name="description" value={this.state.description} onChange={this.handleTextChange}></input>
       <label for="amount">Amount:</label><input type="number" id="amount" name="amount" value={this.state.amount} onChange={this.handleTextChange}></input>
       <label for="month">Month:</label><select id="month" name="month" value={this.state.month} onChange={this.handleSelectChange}>
            <option value="Jan" id="Jan">January</option>
            <option value="Feb" id="Feb">Febrary</option>
            <option value="Mar" id="Mar">March</option>
            <option value="Apr" id="Apr">April</option>
            <option value="May" id="May">May</option>
            <option value="Jun" id="Jun">June</option>
            <option value="Jul" id="Jul">July</option>
            <option value="Aug" id="Aug">August</option>
            <option value="Sep" id="Sep">September</option>
            <option value="Oct" id="Oct">October</option>
            <option value="Nov" id="Nov">November</option>
            <option value="Dec" id="Dec">December</option>
         </select>
       <label for="year">Year:</label><select id="year" name="year" value={this.state.year} onChange={this.handleSelectChange}>
            <option value="2016" id="16">2016</option>
            <option value="2017" id="17">2017</option>
            <option value="2018" id="18">2018</option>
            <option value="2019" id="19">2019</option>
            <option value="2020" id="20">2020</option>
         </select>
      </fieldset>
<div className='button-center'>
        <br/>
        <Button bsStyle="success" bsSize="small" onClick={this.onClick}>Add New Expense</Button>
       </div>
          </Modal>
        </div>
      )
   }
   else{
    return (
     <div>
       <Button bsStyle="success" bsSize="small" onClick={this.openModal}><span className="glyphicon glyphicon-plus"></span></Button>
       <Modal
        isOpen={this.state.modalIsOpen}
        onAfterOpen={this.afterOpenModal}
        onRequestClose={this.closeModal}
        contentLabel="Add Expense"
        className="Modal">
<div className='button-center'>
        <h3>{this.state.messageFromServer}</h3>
        <Link to={{pathname: '/', search: '' }} style={{ textDecoration: 'none' }}>
         <Button bsStyle="success" bsSize="mini" onClick={this.closeModal}>Close the Dialog</Button>
        </Link>
       </div>
      </Modal>
       </div>
     )
    }
   }
}
export default Add;
We will also update the App.css file to style the modal dialog. Head to the client/css directory and add the following css to the App.css file.
/*client/css/App.css*/
.button-col {
    width:100px;
    text-align:center;
}
.desc-col {
 width:300px;
 text-align:left;
}
table {
    counter-reset: tableCount;
}
.counterCell:before {
    content: counter(tableCount);
    counter-increment: tableCount;
}
.counterCell {
 text-align: center;
 width:50px;
}
.button-center {
 text-align: center;
}
.Modal {
   position: relative;
   top: 250px;
   left: 400px;
   right: 20px;
   bottom: 20px;
   background-color: #F5F5F5;
   width:500px;
   border: 1px solid #000;
   border-radius: 4px;
   padding: 20px;
 }
.Overlay {
   position: fixed;
   top: 0;
   left: 0;
   right: 0;
   bottom: 0;
   background-color: rebeccapurple;
 }
.button-center {
  text-align: center;
 }
label{
 display:inline-block;
 width:200px;
 margin-right:30px;
 text-align:right;
 }
fieldset{
 border:none;
 margin:0px auto;
 }
.closebtn{
   float:right;
 }
Notice that in Add.js I used a Link to navigate back to the App component after the new expense was saved in the database. This navigation will take place through a react router. You can read more about the react router here.
To use react router, we need to implement some routes. We will keep our client side routes inside the routes.js file in the client directory. This is what the client/routes.js file will look like.
//client/routes.js
import React from 'react';
import { Route, Switch } from 'react-router-dom';
import App from './components/app';
export const Routes = () => (
    <Switch>
      <Route exact path='/' component={App} />
    </Switch>
);
export default Routes;
Here we create one route with the path ‘/’ that renders the App component. Now we need to render the Routes component inside the client/index.js file to ensure that React uses this route.
//client/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import { HashRouter } from 'react-router-dom'
import Routes from './routes'
ReactDOM.render(
  <HashRouter>
    <Routes />
  </HashRouter>, document.getElementById('root')
);
Step 7.2. CRUD: Adding the Read functionality
The next step is to display the list of expenses on the App component. First we will write a function that will get all the expenses from the database using /getAll route that we created earlier. This getData() function does that for us.
getData(ev, year){
    axios.get('/getAll?month=All&year='+year)
      .then(function(response) {
        ev.setState({data: response.data});
        ev.setState({selectedYear: parseInt(year)})
      });
  }
We will also render the Add component inside the App component. The list of expenses received from the server is displayed in a table. The App.js now looks like this.
//client/components/App.js
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import Add from './Add'
export default class App extends React.Component {
constructor() {
    super();
  this.state = {selectedMonth:'Jan', selectedYear: 2016, data: []};
    this.getData = this.getData.bind(this);
  }
componentDidMount() {
    this.getData(this, '2016');
  }
  componentWillReceiveProps(nextProps) {
    this.getData(this, '2016');
  }
getData(ev, year){
    axios.get('/getAll?month=All&year='+year)
      .then(function(response) {
        ev.setState({data: response.data});
        ev.setState({selectedYear: parseInt(year)})
      });
  }
render() {
    return (
      <div>
        <Add selectedMonth={this.state.selectedMonth} selectedYear={this.state.selectedYear} />
        <table>
          <thead>
            <tr><th></th><th className='desc-col'>Description</th><th className='button-col'>Amount</th><th className='button-col'>Month</th><th className='button-col'>Year</th></tr>
          </thead>
          <tbody>
            {
              this.state.data.map(function(exp){
                return  <tr><td className='counterCell'></td><td className='desc-col'>{exp.description}</td><td className='button-col'>{exp.amount}</td><td className='button-col'>{exp.month}</td><td className='button-col'>{exp.year}</td></tr>
              })
            }
            </tbody>
</table>
      </div>
    );
  }
}
Now run npm start and start adding expenses. The table should update in real time as new expenses are added.

Step 7.3. CRUD: Adding the Update functionality
Now we will create the Update component. Head to the client/components directory and create an Update.js file. Place the following code inside this file. The code is similar to the Add.js except that we have update() function instead of insertNewExpense().
//client/components/Update.js
import React from 'react';
import Modal from 'react-modal';
import axios from 'axios';
import { Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';
var querystring = require('querystring');
class Update extends React.Component {
  constructor() {
    super();
    this.state = {
      id: '',
      description: '',
      amount: '',
      month: '',
      year: '',
      messageFromServer: '',
      modalIsOpen: false
    }
this.update = this.update.bind(this);
    this.handleSelectChange = this.handleSelectChange.bind(this);
    this.onClick = this.onClick.bind(this);
    this.handleTextChange = this.handleTextChange.bind(this);
    this.openModal = this.openModal.bind(this);
    this.closeModal = this.closeModal.bind(this);
}
componentDidMount() {
    this.setState({
      id: this.props.expense._id,
      description: this.props.expense.description,
      amount: this.props.expense.amount,
      month: this.props.expense.month,
      year: this.props.expense.year,
    });
  }
openModal() {
    this.setState({
      modalIsOpen: true
    });
  }
closeModal() {
    this.setState({
      modalIsOpen: false,
      messageFromServer: ''
    });
  }
handleSelectChange(e) {
    if (e.target.name == "month") {
      this.setState({
        month: e.target.value
      });
    }
    if (e.target.name == "year") {
      this.setState({
        year: e.target.value
      });
    }
  }
handleTextChange(e) {
    if (e.target.name == "description") {
      this.setState({
        description: e.target.value
      });
    }
if (e.target.name == "amount") {
      this.setState({
        amount: e.target.value
      });
    }
  }
onClick(e) {
    this.update(this);
  }
update(e) {
    axios.post('/update',
      querystring.stringify({
        _id: e.state.id,
        description: e.state.description,
        amount: e.state.amount,
        month: e.state.month,
        year: e.state.year
      }), {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      }).then(function(response) {
      e.setState({
        messageFromServer: response.data
      });
});
  }
render() {
    if(this.state.messageFromServer == ''){
      return (
        <div>
          <Button bsStyle="warning" bsSize="small" onClick={this.openModal}><span className="glyphicon glyphicon-edit"></span></Button>
          <Modal
            isOpen={this.state.modalIsOpen}
            onRequestClose={this.closeModal}
            contentLabel="Add Expense"
            className="Modal">
<Link to={{pathname: '/', search: '' }} style={{ textDecoration: 'none' }}>
            <Button bsStyle="danger" bsSize="mini" onClick={this.closeModal}><span className="closebtn glyphicon glyphicon-remove"></span></Button>
          </Link><br/>
<fieldset>
            <label for="description">Description:</label><input type="text" id="description" name="description" value={this.state.description} onChange={this.handleTextChange}></input>
            <label for="amount">Amount:</label><input type="number" id="amount" name="amount" value={this.state.amount} onChange={this.handleTextChange}></input>
            <label for="month">Month:</label><select id="month" name="month" value={this.state.month} onChange={this.handleSelectChange}>
                      <option value="Jan" id="Jan">January</option>
                      <option value="Feb" id="Feb">Febrary</option>
                      <option value="Mar" id="Mar">March</option>
                      <option value="Apr" id="Apr">April</option>
                      <option value="May" id="May">May</option>
                      <option value="Jun" id="Jun">June</option>
                      <option value="Jul" id="Jul">July</option>
                      <option value="Aug" id="Aug">August</option>
                      <option value="Sep" id="Sep">September</option>
                      <option value="Oct" id="Oct">October</option>
                      <option value="Nov" id="Nov">November</option>
                      <option value="Dec" id="Dec">December</option>
                </select>
            <label for="year">Year:</label><select id="year" name="year" value={this.state.year} onChange={this.handleSelectChange}>
                      <option value="2015" id="17">2015</option>
                      <option value="2016" id="17">2016</option>
                      <option value="2017" id="17">2017</option>
                      <option value="2018" id="18">2018</option>
                      <option value="2019" id="19">2019</option>
                      <option value="2020" id="20">2020</option>
                </select>
          </fieldset>
<div className='button-center'>
              <br/>
              <Button bsStyle="warning" bsSize="small" onClick={this.onClick}>Update</Button>
            </div>
          </Modal>
        </div>
      )
    }
    else{
      return (
        <div>
         <Button bsStyle="warning" bsSize="small" onClick={this.openModal}><span className="glyphicon glyphicon-edit"></span></Button>
         <Modal
           isOpen={this.state.modalIsOpen}
           onAfterOpen={this.afterOpenModal}
           onRequestClose={this.closeModal}
           contentLabel="Add Expense"
           className="Modal">
<div className='button-center'>
              <h3>{this.state.messageFromServer}</h3>
              <Link to={{pathname: '/', search: '' }} style={{ textDecoration: 'none' }}>
                <Button bsStyle="success" bsSize="mini" onClick={this.closeModal}>Close the Dialog</Button>
              </Link>
            </div>
          </Modal>
        </div>
        )
      }
  }
}
export default Update;
Now we render the Update component inside the App component. The App.js will now look like this.
//client/components/App.js
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import Add from './Add';
import Update from './Update'
export default class App extends React.Component {
constructor() {
    super();
  this.state = {selectedMonth:'All', selectedYear: 2016, data: []};
    this.getData = this.getData.bind(this);
  }
componentDidMount() {
    this.getData(this, '2016');
  }
  componentWillReceiveProps(nextProps) {
    this.getData(this, '2016');
  }
getData(ev, year){
    axios.get('/getAll?month=All&year='+year)
      .then(function(response) {
        ev.setState({data: response.data});
        ev.setState({selectedYear: parseInt(year)})
      });
  }
render() {
    return (
      <div>
        <Add selectedMonth={this.state.selectedMonth} selectedYear={this.state.selectedYear} />
        <table>
          <thead>
            <tr><th></th><th className='desc-col'>Description</th><th className='button-col'>Amount</th><th className='button-col'>Month</th><th className='button-col'>Year</th><th className='button-col'>Update</th></tr>
          </thead>
          <tbody>
            {
              this.state.data.map(function(exp){
                return  <tr><td className='counterCell'></td><td className='desc-col'>{exp.description}</td><td className='button-col'>{exp.amount}</td><td className='button-col'>{exp.month}</td><td className='button-col'>{exp.year}</td><td className='button-col'><Update expense={exp} /></td></tr>
              })
            }
            </tbody>
</table>
      </div>
    );
  }
}
Now run npm start. You will see an update button added in front of each entry in the table. A modal dialog will pop up when the button is pressed which will let you update the entry.

Step 7.4. CRUD: Adding the Delete functionality
We will now create the Delete functionality. Create a Delete.js file inside client/components. Place the following code inside this file.
//client/components/Delete.js
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import { Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';
class Delete extends React.Component {
constructor(){
  super();
  this.state={id:''};
  this.onClick = this.onClick.bind(this);
  this.delete = this.delete.bind(this);
}
componentDidMount() {
    this.setState({
      id: this.props.expense._id
    })
  }
onClick(e){
     this.delete(this);
    }
delete(e){
    axios.get('/delete?id='+e.state.id)
      .then(function(response) {
          
    });
}
render(){
  return (
    <Button bsStyle="danger" bsSize="small" onClick={this.onClick}>
     <Link to={{pathname: '/', search: '' }} style={{ textDecoration: 'none' }}>
                  <span className="glyphicon glyphicon-remove"></span>
         </Link>
    </Button>
  )
 }
}
export default Delete;
Let’s now render the Delete component inside App. The App.js should look like this now.
//client/components/App.js
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import Add from './Add';
import Update from './Update';
import Delete from './Delete';
export default class App extends React.Component {
constructor() {
    super();
  this.state = {selectedMonth:'All', selectedYear: 2016, data: []};
    this.getData = this.getData.bind(this);
  }
componentDidMount() {
    this.getData(this, '2016');
  }
  componentWillReceiveProps(nextProps) {
    this.getData(this, '2016');
  }
getData(ev, year){
    axios.get('/getAll?month=All&year='+year)
      .then(function(response) {
        ev.setState({data: response.data});
        ev.setState({selectedYear: parseInt(year)})
      });
  }
render() {
    return (
      <div>
        <Add selectedMonth={this.state.selectedMonth} selectedYear={this.state.selectedYear} />
        <table>
          <thead>
            <tr><th></th><th className='desc-col'>Description</th><th className='button-col'>Amount</th><th className='button-col'>Month</th><th className='button-col'>Year</th><th className='button-col'>Update</th><th className='button-col'>Delete</th></tr>
          </thead>
          <tbody>
            {
              this.state.data.map(function(exp){
                return  <tr><td className='counterCell'></td><td className='desc-col'>{exp.description}</td><td className='button-col'>{exp.amount}</td><td className='button-col'>{exp.month}</td><td className='button-col'>{exp.year}</td><td className='button-col'><Update expense={exp} /></td><td className='button-col'><Delete id={exp._id} expense={exp} /></td></tr>
              })
            }
            </tbody>
</table>
      </div>
    );
  }
}
Now run npm start and open http://localhost:8000 in your browser. You will see a delete button in front of each entry in the table. Pressing that button deletes the entry and updates the table.

Step 8: Add tabs to improve presentation
To improve the presentation we can add tabs for each year and each month and use React router to render the view for each tab.
Let’s create a tab for each year using the react-bootstrap package. Let’s create a new folder tabs in the client/components folder. Now create a new file yearTabsRouter.js inside the new tabs folder.
//client/components/tabs/yearTabsRouter.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Tab, Tabs } from 'react-bootstrap'
import { Link } from 'react-router-dom';
class YearTabsRouter extends React.Component {
constructor(){
  super();
  this.state={style:{'font-size': '16px'}}
 }
 render(){
   return <Link to={{pathname: '/', search: '?month=All&year='+this.props.year }} >
     <p style={this.state.style}>{this.props.year}</p>
    </Link>
 }
}
export default YearTabsRouter;
YearTabsRouter returns a Link that renders the App component (using the route we created earlier) with year sent in as a prop in search. Whenever this link will be clicked, App will be rendered and the expenses of the year sent in search will be loaded.
To implement this, we will need to render this component in the App component and fetch the data from the server using the prop sent from YearTabsRouter. The new props will be received in the componentWillReceiveProps() method. We will make a call to the server and reload the table using the year received as a prop. The App.js will look like this.
//client/components/App.js
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import Add from './Add';
import Update from './Update';
import Delete from './Delete';
import { Tab, Tabs } from 'react-bootstrap';
import YearTabsRouter from './tabs/yearTabsRouter';
export default class App extends React.Component {
constructor() {
    super();
  this.state = {selectedMonth:'All', selectedYear: 2016, data: [], activeTab:2016};
    this.getData = this.getData.bind(this);
  }
componentWillReceiveProps(nextProps) {
    if(nextProps.history.location.search){
    var search = nextProps.history.location.search;
    search = search.substring(1);
    var searchObj = JSON.parse('{"' + decodeURI(search).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g,'":"') + '"}');
    this.setState({activeTab: parseInt(searchObj.year)});
    this.setState({selectedYear: searchObj.year});
    this.setState({selectedMonth: searchObj.month});
this.getData(this, searchObj.year, searchObj.month);
  }else{
      this.getData(this, 2016, 'All');
    }
  }
componentDidMount(){
    this.getData(this, 2016, 'All');
  }
handleSelect(selectedTab) {
     this.setState({
       activeTab: selectedTab,
       selectedYear: selectedTab
     });
  }
getData(ev, year, month){
    axios.get('/getAll?month='+month+'&year='+year)
      .then(function(response) {
        ev.setState({data: response.data});
        ev.setState({selectedYear: parseInt(year)});
        ev.setState({selectedMonth: month});
      });
}
render() {
    return (
      <div>
        <Tabs activeKey={this.state.activeTab} onSelect={this.handleSelect}>
          <Tab eventKey={2016} title={<YearTabsRouter year='2016' />}></Tab>
          <Tab eventKey={2017} title={<YearTabsRouter year='2017' />}></Tab>
          <Tab eventKey={2018} title={<YearTabsRouter year='2018'/>}></Tab>
          <Tab eventKey={2019} title={<YearTabsRouter year='2019'/>}></Tab>
          <Tab eventKey={2020} title={<YearTabsRouter year='2020'/>}></Tab>
        </Tabs>
        <Add selectedMonth={this.state.selectedMonth} selectedYear={this.state.selectedYear} />
        <table>
          <thead>
            <tr><th></th><th className='desc-col'>Description</th><th className='button-col'>Amount</th><th className='button-col'>Month</th><th className='button-col'>Year</th><th className='button-col'>Update</th><th className='button-col'>Delete</th></tr>
          </thead>
          <tbody>
            {
              this.state.data.map((exp) => {
                return  <tr><td className='counterCell'></td><td className='desc-col'>{exp.description}</td><td className='button-col'>{exp.amount}</td><td className='button-col'>{exp.month}</td><td className='button-col'>{exp.year}</td><td className='button-col'><Update expense={exp}/></td><td className='button-col'><Delete expense={exp} /></td></tr>
              })
            }
            </tbody>
</table>
      </div>
    );
  }
}
Now run npm start and you will have a tab for each year.

We can also add nested month tabs for each year tab. To do this we will create a MonthTabs component to generate month tabs and a MonthTabsRouter component that will take care of the navigation. For MonthTabs component we create a monthTabs.js file inside client/components/tabs directory and place the following code inside it.
//client/components/tabs/monthTabs.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Tab, Tabs } from 'react-bootstrap'
import MonthTabsRouter from './monthTabsRouter'
import YearTabsRouter  from './yearTabsRouter'
class MonthTabs extends React.Component {
 constructor(){
  super();
  this.state = {activeTab:''};
  this.handleSelect = this.handleSelect.bind(this);
}
componentWillReceiveProps(nextProps) {
    this.setState({activeTab:this.props.year+'-'+nextProps.monthlyActiveTab});
  }
handleSelect(selectedTab) {
     this.setState({
       activeTab: selectedTab
     });
 }
render(){
  return <Tabs activeKey={this.state.activeTab} onSelect={this.handleSelect}>
            <Tab eventKey={this.props.year+'-All'} title={<MonthTabsRouter tabId='All' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Jan'} title={<MonthTabsRouter tabId='Jan' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Feb'} title={<MonthTabsRouter tabId='Feb' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Mar'} title={<MonthTabsRouter tabId='Mar' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Apr'} title={<MonthTabsRouter tabId='Apr' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-May'} title={<MonthTabsRouter tabId='May' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Jun'} title={<MonthTabsRouter tabId='Jun' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Jul'} title={<MonthTabsRouter tabId='Jul' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Aug'} title={<MonthTabsRouter tabId='Aug' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Sep'} title={<MonthTabsRouter tabId='Sep' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Oct'} title={<MonthTabsRouter tabId='Oct' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Nov'} title={<MonthTabsRouter tabId='Nov' year={this.props.year}/>}></Tab>
            <Tab eventKey={this.props.year+'-Dec'} title={<MonthTabsRouter tabId='Dec' year={this.props.year}/>}></Tab>
    </Tabs>
}
}
export default MonthTabs;
Similarly, to create MonthTabsRouter component add a monthTabsRouter.js file inside client/components/tabs directory. Here is what monthTabsRouter.js will look like.
//client/components/tabs/monthTabsRouter.js
import React from 'react';
import ReactDOM from 'react-dom';
import { Link } from 'react-router-dom';
class MonthTabsRouter extends React.Component {
 constructor(){
  super();
  this.state={style:{'font-size': '10px'}}
 }
render(){
  if(this.props.tabId == 'All'){
   return <Link to={{pathname: '/', search: '?month=All&year='+this.props.year}} >
     <p style={this.state.style}>Show All</p>
    </Link>
  }
else{
   return <Link to={{pathname: '/', search: '?month='+this.props.tabId + '&year='+this.props.year }} >
     <p style={this.state.style}>{this.props.tabId} {this.props.year}</p>
    </Link>
  }
}
}
export default MonthTabsRouter;
Now we render the new month tabs inside the App component. The App.js will look like this now.
//client/components/App.js
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import Add from './Add';
import Update from './Update';
import Delete from './Delete';
import { Tab, Tabs } from 'react-bootstrap';
import YearTabsRouter from './tabs/yearTabsRouter';
import MonthTabs from './tabs/monthTabs';
export default class App extends React.Component {
constructor() {
    super();
  this.state = {selectedMonth:'All', selectedYear: 2016, data: [], activeTab:2016};
    this.getData = this.getData.bind(this);
  }
componentWillReceiveProps(nextProps) {
    if(nextProps.history.location.search){
    var search = nextProps.history.location.search;
    search = search.substring(1);
    var searchObj = JSON.parse('{"' + decodeURI(search).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g,'":"') + '"}');
    this.setState({activeTab: parseInt(searchObj.year)});
    this.setState({selectedYear: searchObj.year});
    this.setState({selectedMonth: searchObj.month});
this.getData(this, searchObj.year, searchObj.month);
  }else{
      this.getData(this, 2016, 'All');
    }
  }
componentDidMount(){
    this.getData(this, 2016, 'All');
  }
handleSelect(selectedTab) {
     this.setState({
       activeTab: selectedTab,
       selectedYear: selectedTab
     });
  }
getData(ev, year, month){
    axios.get('/getAll?month='+month+'&year='+year)
      .then(function(response) {
        ev.setState({data: response.data});
        ev.setState({selectedYear: parseInt(year)});
        ev.setState({selectedMonth: month});
      });
}
render() {
    return (
      <div>
        <Tabs activeKey={this.state.activeTab} onSelect={this.handleSelect}>
          <Tab eventKey={2016} title={<YearTabsRouter year='2016' />}><MonthTabs year='2016' monthlyActiveTab={this.state.selectedMonth}/></Tab>
          <Tab eventKey={2017} title={<YearTabsRouter year='2017' />}><MonthTabs year='2017' monthlyActiveTab={this.state.selectedMonth}/></Tab>
          <Tab eventKey={2018} title={<YearTabsRouter year='2018'/>}><MonthTabs year='2018' monthlyActiveTab={this.state.selectedMonth}/></Tab>
          <Tab eventKey={2019} title={<YearTabsRouter year='2019'/>}><MonthTabs year='2019' monthlyActiveTab={this.state.selectedMonth}/></Tab>
          <Tab eventKey={2020} title={<YearTabsRouter year='2020'/>}><MonthTabs year='2020' monthlyActiveTab={this.state.selectedMonth}/></Tab>
        </Tabs>
        <Add selectedMonth={this.state.selectedMonth} selectedYear={this.state.selectedYear} />
        <table>
          <thead>
            <tr><th></th><th className='desc-col'>Description</th><th className='button-col'>Amount</th><th className='button-col'>Month</th><th className='button-col'>Year</th><th className='button-col'>Update</th><th className='button-col'>Delete</th></tr>
          </thead>
          <tbody>
            {
              this.state.data.map((exp) => {
                return  <tr><td className='counterCell'></td><td className='desc-col'>{exp.description}</td><td className='button-col'>{exp.amount}</td><td className='button-col'>{exp.month}</td><td className='button-col'>{exp.year}</td><td className='button-col'><Update expense={exp}/></td><td className='button-col'><Delete expense={exp} /></td></tr>
              })
            }
            </tbody>
</table>
      </div>
    );
  }
}
We also need to wire our CRUD components with the newly created tabs. Previously, we did not have any tabs and our application was loading the landing page after each CRUD operation. Now we have numerous tabs and we need to ensure that the correct tab is loaded after every CRUD operation. We can fix this by sending the year and month of the selected tab as props inside the CRUD components. The new props will be received in the componentWillReceiveProps() function. Let’s make this fix in the Add.js file. Here is what Add.js looks like now.
//client/components/Add.js
import React from 'react';
import {Button} from 'react-bootstrap';
import Modal from 'react-modal';
import axios from 'axios';
import {Link} from 'react-router-dom';
var querystring = require('querystring');
class Add extends React.Component {
constructor() {
      super();
this.state = {
        description: '',
        amount: '',
        month: '',
        year: '',
        messageFromServer: '',
        modalIsOpen: false
      }
this.handleSelectChange = this.handleSelectChange.bind(this);
      this.onClick = this.onClick.bind(this);
      this.handleTextChange = this.handleTextChange.bind(this);
      this.insertNewExpense = this.insertNewExpense.bind(this);
      this.openModal = this.openModal.bind(this);
      this.closeModal = this.closeModal.bind(this);
    }
openModal() {
      this.setState({
        modalIsOpen: true
      });
    }
closeModal() {
      this.setState({
        modalIsOpen: false,
        description: '',
        amount: '',
        month: 'Jan',
        year: 2016,
        messageFromServer: ''
      });
    }
componentDidMount() {
    if(this.props.selectedMonth == 'All'){
      this.setState({
        month: 'Jan'
      });
    }else{
      this.setState({
        month: this.props.selectedMonth
      });
    }
this.setState({
        year: this.props.selectedYear
      });
    }
componentWillReceiveProps(nextProps){
      if(this.props.selectedMonth == 'All'){
        this.setState({
          month: 'Jan'
        });
      }else{
        this.setState({
          month: this.props.selectedMonth
        });
      }
this.setState({
        year:nextProps.selectedYear
      })
    }
handleSelectChange(e) {
      if (e.target.name == 'month') {
        this.setState({
          month: e.target.value
        });
      }
      if (e.target.name == 'year') {
        this.setState({
          year: e.target.value
        });
      }
    }
onClick(e) {
      this.insertNewExpense(this);
    }
insertNewExpense(e) {
      axios.post('/insert',
        querystring.stringify({
          desc: e.state.description,
          amount: e.state.amount,
          month: e.state.month,
          year: e.state.year
        }), {
          headers: {
            "Content-Type": "application/x-www-form-urlencoded"
          }
        }).then(function(response) {
        e.setState({
          messageFromServer: response.data
        });
      });
    }
handleTextChange(e) {
      if (e.target.name == "description") {
        this.setState({
          description: e.target.value
        });
      }
if (e.target.name == "amount") {
        this.setState({
          amount: e.target.value
        });
      }
    }
render() {
   if(this.state.messageFromServer == ''){
      return (
        <div>
      <Button bsStyle="success" bsSize="small" onClick={this.openModal}><span className="glyphicon glyphicon-plus"></span></Button>
          <Modal
            isOpen={this.state.modalIsOpen}
            onRequestClose={this.closeModal}
            contentLabel="Add Expense"
       className="Modal">
<Link to={{pathname: '/', search: '?month='+this.state.month+'&year='+this.state.year }} style={{ textDecoration: 'none' }}>
       <Button bsStyle="danger" bsSize="mini" onClick={this.closeModal}><span className="closebtn glyphicon glyphicon-remove"></span></Button>
      </Link><br/>
<fieldset>
       <label for="description">Description:</label><input type="text" id="description" name="description" value={this.state.description} onChange={this.handleTextChange}></input>
       <label for="amount">Amount:</label><input type="number" id="amount" name="amount" value={this.state.amount} onChange={this.handleTextChange}></input>
       <label for="month">Month:</label><select id="month" name="month" value={this.state.month} onChange={this.handleSelectChange}>
            <option value="Jan" id="Jan">January</option>
            <option value="Feb" id="Feb">Febrary</option>
            <option value="Mar" id="Mar">March</option>
            <option value="Apr" id="Apr">April</option>
            <option value="May" id="May">May</option>
            <option value="Jun" id="Jun">June</option>
            <option value="Jul" id="Jul">July</option>
            <option value="Aug" id="Aug">August</option>
            <option value="Sep" id="Sep">September</option>
            <option value="Oct" id="Oct">October</option>
            <option value="Nov" id="Nov">November</option>
            <option value="Dec" id="Dec">December</option>
         </select>
       <label for="year">Year:</label><select id="year" name="year" value={this.state.year} onChange={this.handleSelectChange}>
            <option value="2015" id="17">2015</option>
            <option value="2016" id="17">2016</option>
            <option value="2017" id="17">2017</option>
            <option value="2018" id="18">2018</option>
            <option value="2019" id="19">2019</option>
            <option value="2020" id="20">2020</option>
         </select>
      </fieldset>
<div className='button-center'>
        <br/>
        <Button bsStyle="success" bsSize="small" onClick={this.onClick}>Add New Expense</Button>
       </div>
          </Modal>
        </div>
      )
   }
   else{
    return (
     <div>
       <Button bsStyle="success" bsSize="small" onClick={this.openModal}><span className="glyphicon glyphicon-plus"></span></Button>
       <Modal
        isOpen={this.state.modalIsOpen}
        onAfterOpen={this.afterOpenModal}
        onRequestClose={this.closeModal}
        contentLabel="Add Expense"
        className="Modal">
<div className='button-center'>
        <h3>{this.state.messageFromServer}</h3>
        <Link to={{pathname: '/', search: '?month='+this.state.month+'&year='+this.state.year}} style={{ textDecoration: 'none' }}>
         <Button bsStyle="success" bsSize="mini" onClick={this.closeModal}>Close the Dialog</Button>
        </Link>
       </div>
      </Modal>
       </div>
     )
    }
   }
}
export default Add;
Similarly, we will update the Update.js and Delete.js. Given below is the Update.js file.
//client/components/Update.js
import React from 'react';
import Modal from 'react-modal';
import axios from 'axios';
import { Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';
var querystring = require('querystring');
class Update extends React.Component {
  constructor() {
    super();
    this.state = {
      id: '',
      description: '',
      amount: '',
      month: '',
      year: '',
      messageFromServer: '',
      modalIsOpen: false
    }
this.update = this.update.bind(this);
    this.handleSelectChange = this.handleSelectChange.bind(this);
    this.onClick = this.onClick.bind(this);
    this.handleTextChange = this.handleTextChange.bind(this);
    this.openModal = this.openModal.bind(this);
    this.closeModal = this.closeModal.bind(this);
}
componentDidMount() {
    this.setState({
      id: this.props.expense._id,
      description: this.props.expense.description,
      amount: this.props.expense.amount,
      month: this.props.expense.month,
      year: this.props.expense.year
    });
  }
componentWillReceiveProps(nextProps){
    this.setState({
      id: nextProps.expense._id,
      description: nextProps.expense.description,
      month:nextProps.expense.month,
      year:nextProps.expense.year
    })
  }
openModal() {
    this.setState({
      modalIsOpen: true
    });
  }
closeModal() {
    this.setState({
      modalIsOpen: false,
      messageFromServer: ''
    });
  }
handleSelectChange(e) {
    if (e.target.name == "month") {
      this.setState({
        month: e.target.value
      });
    }
    if (e.target.name == "year") {
      this.setState({
        year: e.target.value
      });
    }
  }
handleTextChange(e) {
    if (e.target.name == "description") {
      this.setState({
        description: e.target.value
      });
    }
if (e.target.name == "amount") {
      this.setState({
        amount: e.target.value
      });
    }
  }
onClick(e) {
    this.update(this);
  }
update(e) {
    axios.post('/update',
      querystring.stringify({
        _id: e.state.id,
        description: e.state.description,
        amount: e.state.amount,
        month: e.state.month,
        year: e.state.year
      }), {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      }).then(function(response) {
      e.setState({
        messageFromServer: response.data
      });
});
  }
render() {
    if(this.state.messageFromServer == ''){
      return (
        <div>
          <Button bsStyle="warning" bsSize="small" onClick={this.openModal}><span className="glyphicon glyphicon-edit"></span></Button>
          <Modal
            isOpen={this.state.modalIsOpen}
            onRequestClose={this.closeModal}
            contentLabel="Add Expense"
            className="Modal">
<Link to={{pathname: '/', search: '?month='+this.state.month+'&year='+this.state.year }} style={{ textDecoration: 'none' }}>
            <Button bsStyle="danger" bsSize="mini" onClick={this.closeModal}><span className="closebtn glyphicon glyphicon-remove"></span></Button>
          </Link><br/>
<fieldset>
            <label for="description">Description:</label><input type="text" id="description" name="description" value={this.state.description} onChange={this.handleTextChange}></input>
            <label for="amount">Amount:</label><input type="number" id="amount" name="amount" value={this.state.amount} onChange={this.handleTextChange}></input>
            <label for="month">Month:</label><select id="month" name="month" value={this.state.month} onChange={this.handleSelectChange}>
                      <option value="Jan" id="Jan">January</option>
                      <option value="Feb" id="Feb">Febrary</option>
                      <option value="Mar" id="Mar">March</option>
                      <option value="Apr" id="Apr">April</option>
                      <option value="May" id="May">May</option>
                      <option value="Jun" id="Jun">June</option>
                      <option value="Jul" id="Jul">July</option>
                      <option value="Aug" id="Aug">August</option>
                      <option value="Sep" id="Sep">September</option>
                      <option value="Oct" id="Oct">October</option>
                      <option value="Nov" id="Nov">November</option>
                      <option value="Dec" id="Dec">December</option>
                </select>
            <label for="year">Year:</label><select id="year" name="year" value={this.state.year} onChange={this.handleSelectChange}>
                      <option value="2015" id="17">2015</option>
                      <option value="2016" id="17">2016</option>
                      <option value="2017" id="17">2017</option>
                      <option value="2018" id="18">2018</option>
                      <option value="2019" id="19">2019</option>
                      <option value="2020" id="20">2020</option>
                </select>
          </fieldset>
<div className='button-center'>
              <br/>
              <Button bsStyle="warning" bsSize="small" onClick={this.onClick}>Update</Button>
            </div>
          </Modal>
        </div>
      )
    }
    else{
      return (
        <div>
         <Button bsStyle="warning" bsSize="small" onClick={this.openModal}><span className="glyphicon glyphicon-edit"></span></Button>
         <Modal
           isOpen={this.state.modalIsOpen}
           onAfterOpen={this.afterOpenModal}
           onRequestClose={this.closeModal}
           contentLabel="Add Expense"
           className="Modal">
<div className='button-center'>
              <h3>{this.state.messageFromServer}</h3>
              <Link to={{pathname: '/', search: '?month='+this.state.month+'&year='+this.state.year}} style={{ textDecoration: 'none' }}>
                <Button bsStyle="success" bsSize="mini" onClick={this.closeModal}>Close the Dialog</Button>
              </Link>
            </div>
          </Modal>
        </div>
        )
      }
  }
}
export default Update;
Here is the updated Delete.js file.
//client/components/Delete.js
import React from 'react';
import ReactDOM from 'react-dom';
import axios from 'axios';
import { Button } from 'react-bootstrap';
import { Link } from 'react-router-dom';
class Delete extends React.Component {
constructor(){
  super();
  this.state={id: '', month: '', year: ''};
  this.onClick = this.onClick.bind(this);
  this.delete = this.delete.bind(this);
}
componentDidMount() {
    this.setState({
      id: this.props.expense._id,
      month: this.props.expense.month,
      year: this.props.expense.year
    })
  }
componentWillReceiveProps(nextProps){
  this.setState({
    id: nextProps.expense._id,
    month:nextProps.expense.month,
    year:nextProps.expense.year
  })
  }
onClick(e){
     this.delete(this);
    }
delete(e){
    axios.get('/delete?id='+e.state.id)
      .then(function(response) {
});
}
render(){
  return (
    <Button bsStyle="danger" bsSize="small" onClick={this.onClick}>
     <Link to={{pathname: '/', search: '?month='+this.state.month+'&year='+this.state.year}} style={{ textDecoration: 'none' }}>
                  <span className="glyphicon glyphicon-remove"></span>
         </Link>
    </Button>
)
 }
}
export default Delete;
Now execute npm start and run the application at http://localhost:8000. You will see that each month now has its own tab in addition to the year tabs.

The structure of our root folder looks like this.

Structure of Root Folder
And that’s it! Our Expense Manager is now ready. We first implemented the server side and created routes for CRUD operations. Then we created a React component for each CRUD operation and rendered them on our main React component. Finally, we distributed our data into tabs and used React’s router to navigate between them. You can find the code here. I hope this tutorial helps you get started with the MERN stack. If you have any questions, feel free to post them in the comments section.
JavaScript
React
Mongodb
Nodejs
Expressjs
1.8K claps

Umair Aslam's Tech Blog
WRITTEN BY

Umair Aslam's Tech Blog
Full Stack Developer. Amateur Project Manager. Avid sports fan. https://www.linkedin.com/in/umairraslam/
Follow
CloudBoost
CloudBoost
The Realtime JavaScript Backend.
Follow
See responses (40)
More From Medium
Patterns For JavaScript Frontend Applications
Richard Ng in CloudBoost

Event-Driven Programming with NodeJS Net and Events.
Danstan Onyango in CloudBoost

Getting the Most Out of Styled Components (7 Must Know Features)
Kris Guzman in CloudBoost

Reactjs Unit Testing with Storybook + Jest
Danstan Onyango in CloudBoost

How to make the best use of in-built Navigators in React Navigation
Rakshit Soral in CloudBoost

Real World Azure Serverless use case to implement a B2B API
Surya Venkat in CloudBoost

The Complete Guide to HPC on Azure
Gilad David Maayan in CloudBoost

A Beginner friendly guide to setting up ReactJs
Parul Malhotra in CloudBoost

About
Help
Legal
Get the Medium app
A button that says 'Download on the App Store', and if clicked it will lead you to the iOS App store
A button that says 'Get it on, Google Play', and if clicked it will lead you to the Google Play store